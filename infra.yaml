AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for a highly available, containerized photo uploader application
  on Amazon ECS (Fargate) with RDS, S3, and VPC endpoints for secure communication.

# -----------------------------#
# Parameters                   #
# -----------------------------#
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the first public subnet.
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the second public subnet.
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for the first private subnet.
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for the second private subnet.
  DbSubnet1Cidr:
    Type: String
    Default: 10.0.5.0/24
    Description: CIDR block for the first database subnet.
  DbSubnet2Cidr:
    Type: String
    Default: 10.0.6.0/24
    Description: CIDR block for the second database subnet.
  ApplicationPort:
    Type: Number
    Default: 8080
    Description: Port on which the application container listens.
  AllowedGithubRepo:
    Type: String
    Default: baaki20/ecs-app
    Description: Allowed Github Repo
  AllowedGithubBranch:
    Type: String
    Default: refs/heads/main
    Description: Allowed Github Branch
  DatabaseUsername:
    Type: String
    Default: photoapp
    Description: Username for the RDS PostgreSQL database
  DatabasePassword:
    Type: String
    Default: MySecurePassword123!
    NoEcho: true
    Description: Password for the RDS PostgreSQL database
    MinLength: 8
    MaxLength: 128

Resources:
  # ------------------------------------------------------------#
  #  VPC and Networking                                         #
  # ------------------------------------------------------------#
  # VPC for the application
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-VPC'

  # Internet Gateway for public internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-IGW'

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public subnets in two AZs for high availability
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-PublicSubnet1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-PublicSubnet2'

  # Private subnets in two AZs for ECS tasks
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1Cidr
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-PrivateSubnet1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2Cidr
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-PrivateSubnet2'

  # Database subnets in two AZs for RDS
  DbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref DbSubnet1Cidr
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-DbSubnet1'

  DbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref DbSubnet2Cidr
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-DbSubnet2'

  # Route table for public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-PublicRouteTable'

  # Default route to Internet Gateway for public subnets
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate public subnets with public route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private route table for private subnets (no internet access, only VPC endpoints)
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-PrivateRouteTable'

  # Associate private subnets with private route table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Database route table
  DbRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-DbRouteTable'

  # Associate database subnets with database route table
  DbSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnet1
      RouteTableId: !Ref DbRouteTable

  DbSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnet2
      RouteTableId: !Ref DbRouteTable

  # ------------------------------------------------------------#
  #  VPC Endpoints for ECR and S3                              #
  # ------------------------------------------------------------#
  # S3 Gateway VPC Endpoint
  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource:
              - !Sub '${PhotosBucket}/*'
              - !GetAtt PhotosBucket.Arn

  # ECR API VPC Endpoint
  EcrApiVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'

  # ECR DKR VPC Endpoint
  EcrDkrVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'

  # CloudWatch Logs VPC Endpoint
  LogsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'

  # ------------------------------------------------------------#
  #  Security Groups                                            #
  # ------------------------------------------------------------#
  # Security group for ALB to allow HTTP traffic
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'photo-uploader-ALB-SG'
      GroupDescription: Security group for the ALB.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-ALB-SG'

  # Security group for ECS tasks
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'photo-uploader-ECS-SG'
      GroupDescription: Security group for ECS tasks.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-ECS-SG'

  # Security group for VPC Endpoints
  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'photo-uploader-VpcEndpoint-SG'
      GroupDescription: Security group for VPC endpoints.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref EcsSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-VpcEndpoint-SG'

  # Security group for RDS
  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'photo-uploader-RDS-SG'
      GroupDescription: Security group for RDS database.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EcsSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-RDS-SG'

  # ------------------------------------------------------------#
  #  S3 Bucket for Photos                                       #
  # ------------------------------------------------------------#
  PhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'photo-uploader-${AWS::AccountId}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-bucket'

  # S3 Bucket Policy to restrict access to VPC Endpoint only
  PhotosBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PhotosBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowVPCEndpointAccess
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource:
              - !Sub '${PhotosBucket}/*'
              - !GetAtt PhotosBucket.Arn
            Condition:
              StringEquals:
                'aws:sourceVpce': !Ref S3VpcEndpoint

  # ------------------------------------------------------------#
  #  RDS Database                                               #
  # ------------------------------------------------------------#
  # DB Subnet Group for RDS
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub 'photo-uploader-db-subnet-group'
      DBSubnetGroupDescription: Subnet group for photo uploader RDS database
      SubnetIds:
        - !Ref DbSubnet1
        - !Ref DbSubnet2
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-db-subnet-group'

  # RDS PostgreSQL Database
  PhotoDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'photo-uploader-db'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.4'
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: true
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBName: photouploader
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      DBSubnetGroupName: !Ref DbSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-database'

  # ------------------------------------------------------------#
  #  ECS & Fargate                                              #
  # ------------------------------------------------------------#
  # ECS Cluster for running services
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'photo-uploader-Cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-Cluster'

  # ECR repository for container images
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'photo-uploader-repo'
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-repo'
      RepositoryPolicyText:
        Version: '2008-10-17'
        Statement:
          - Sid: AllowAccountAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload

  # S3 bucket for CodePipeline artifacts
  CodePipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'codepipeline-photo-uploader-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub 'codepipeline-photo-uploader-artifact-store'

  # OIDC provider for GitHub Actions authentication
  GitHubOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 7560d6f40fa55195f740ee2b1b7c0b4836cbe103
      Tags:
        - Key: Name
          Value: !Sub photo-uploader-GitHubOidcProvider

  # IAM Role for GitHub Actions
  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub photo-uploader-GitHubActionsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOidcProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${AllowedGithubRepo}:ref:${AllowedGithubBranch}
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
      Path: "/"
      Policies:
        - PolicyName: ECRPush
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:BatchCheckLayerAvailability
                Resource: !GetAtt EcrRepository.Arn
        - PolicyName: S3DeploymentUpload
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub arn:aws:s3:::${CodePipelineBucket}/*

  # IAM Role for ECS task execution
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'photo-uploader-ECSTaskExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # IAM Role for ECS tasks (application-level permissions)
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'photo-uploader-TaskRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: PhotoUploaderTaskPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt PhotosBucket.Arn
                  - !Sub 'arn:aws:s3:::${PhotosBucket}/*'

  # CloudWatch Log Group for ECS container logs
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/photo-uploader'
      RetentionInDays: 14

  # ECS Task Definition for the application container
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'photo-uploader-task-def'
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub 'photo-uploader-container'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:latest'
          PortMappings:
            - ContainerPort: !Ref ApplicationPort
              Protocol: tcp
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 2
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: production
            - Name: DB_HOST
              Value: !GetAtt PhotoDatabase.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt PhotoDatabase.Endpoint.Port
            - Name: DB_NAME
              Value: photouploader
            - Name: DB_USERNAME
              Value: !Ref DatabaseUsername
            - Name: DB_PASSWORD
              Value: !Ref DatabasePassword
            - Name: S3_BUCKET_NAME
              Value: !Ref PhotosBucket
            - Name: AWS_REGION
              Value: !Ref AWS::Region

  # ECS Service using Fargate
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - AlbListener
      - EcsTaskDefinition
    Properties:
      Cluster: !Ref EcsCluster
      ServiceName: !Sub 'photo-uploader-service'
      TaskDefinition: !Ref EcsTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref EcsSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Sub 'photo-uploader-container'
          ContainerPort: !Ref ApplicationPort
          TargetGroupArn: !Ref TargetGroupBlue
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-service'

  # ------------------------------------------------------------#
  #  Application Load Balancer (ALB)                            #
  # ------------------------------------------------------------#
  # Internet-facing ALB for the application
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'photo-uploader-ALB'

  # Target group for blue environment
  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: Alb
    Properties:
      Name: "photo-uploader-tg-blue"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPort: traffic-port
      Matcher:
        HttpCode: 200-399

  # Target group for green environment
  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "photo-uploader-tg-green"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399

  # Listener for production traffic (port 80)
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroupBlue
    Properties:
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBlue

  # Listener for test/green traffic (port 9000)
  AlbTestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupGreen
      LoadBalancerArn: !Ref Alb
      Port: 9000
      Protocol: HTTP

  # ------------------------------------------------------------#
  #  CI/CD Pipeline and CodeDeploy                              #
  # ------------------------------------------------------------#
  # IAM Role for CodeDeploy
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'photo-uploader-CodeDeployRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  # CodeDeploy Application for ECS
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub 'photo-uploader-App'
      ComputePlatform: ECS

  # CodeDeploy Deployment Group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: EcsService
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub 'photo-uploader-DG'
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      ECSServices:
        - ClusterName: !Ref EcsCluster
          ServiceName: !GetAtt EcsService.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: photo-uploader-tg-blue
              - Name: photo-uploader-tg-green
            ProdTrafficRoute:
              ListenerArns:
                - !Ref AlbListener
            TestTrafficRoute:
              ListenerArns:
                - !Ref AlbTestListener
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT

  # IAM Role for CodePipeline
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'photo-uploader-CodePipelineRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - ecs:*
                  - codedeploy:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepository}
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'

  # CodePipeline for CI/CD
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub 'photo-uploader-Pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
      Stages:
        # Source Stage
        - Name: Source
          Actions:
            - Name: EcrSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref CodePipelineBucket
                S3ObjectKey: !Sub 'codepipeline-deployment-files.zip'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

        # Deploy Stage
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              InputArtifacts:
                - Name: SourceArtifact
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: SourceArtifact
                TaskDefinitionTemplatePath: taskdef.json
                AppSpecTemplateArtifact: SourceArtifact
                AppSpecTemplatePath: appspec.yml
              RunOrder: 1

  # IAM Role for EventBridge to trigger CodePipeline
  EventBridgeRole:
    Type: AWS::IAM::Role
    DependsOn: CodePipeline
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartPipelineExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}

  # EventBridge rule to trigger pipeline on ECR image push
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'EcrImagePush-Rule-photo-uploader'
      Description: Triggers CodePipeline on new ECR image push.
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - 'ECR Image Action'
        detail:
          repository-name:
            - !Ref EcrRepository
          action-type:
            - 'PUSH'
          result:
            - 'SUCCESS'
          image-tag:
            - 'latest'
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}
          RoleArn: !GetAtt EventBridgeRole.Arn
          Id: CodePipelineTarget

  # ------------------------------------------------------------#
  #  ECS Service Auto Scaling                                   #
  # ------------------------------------------------------------#
  # Scalable target for ECS service
  EcsServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: EcsService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/photo-uploader-Cluster/photo-uploader-service
      RoleARN: !GetAtt ApplicationAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # IAM Role for Application Auto Scaling
  ApplicationAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApplicationAutoScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                Resource: "*"

  # Scaling policy based on CPU utilization
  EcsCpuScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "photo-uploader-cpu-scaling"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EcsServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

# -----------------------------#
# Outputs                      #
# -----------------------------#
Outputs:
  # ALB DNS endpoint
  AlbEndpoint:
    Description: The DNS name of the Application Load Balancer.
    Value: !GetAtt Alb.DNSName
    Export:
      Name: !Sub 'photo-uploader-ALB-Endpoint'

  # ARN for GitHub OIDC role
  GitHubOidcRoleArn:
    Description: Role ARN for GitHub Actions to assume via OIDC to push images
    Value: !GetAtt GitHubActionsRole.Arn
    Export:
      Name: !Sub 'photo-uploader-GithubOidcRoleArn'

  # ECR repository URI
  EcrRepositoryUri:
    Description: The URI of the ECR repository.
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}'
    Export:
      Name: !Sub 'photo-uploader-ECR-URI'

  # ECS Cluster name
  EcsClusterName:
    Description: The name of the ECS cluster.
    Value: !Ref EcsCluster
    Export:
      Name: !Sub 'photo-uploader-ECS-Cluster-Name'

  # ECS Service name
  EcsServiceName:
    Description: The name of the ECS service.
    Value: !Ref EcsService
    Export:
      Name: !Sub 'photo-uploader-ECS-Service-Name'

  # S3 Bucket name for photos
  PhotosBucketName:
    Description: The name of the S3 bucket for storing photos.
    Value: !Ref PhotosBucket
    Export:
      Name: !Sub 'photo-uploader-S3-Bucket-Name'

  # RDS Database endpoint
  DatabaseEndpoint:
    Description: The RDS database endpoint.
    Value: !GetAtt PhotoDatabase.Endpoint.Address
    Export:
      Name: !Sub 'photo-uploader-DB-Endpoint'

  # Database port
  DatabasePort:
    Description: The RDS database port.
    Value: !GetAtt PhotoDatabase.Endpoint.Port
    Export:
      Name: !Sub 'photo-uploader-DB-Port'

  # Database name
  DatabaseName:
    Description: The RDS database name.
    Value: photouploader
    Export:
      Name: !Sub 'photo-uploader-DB-Name'